help.start()
## install.packages("vcd")
help(package="vcd")
library(vcd)
library(grid)
help(Artritis)
help("Arthritis")
Arthritis
##q()
#Method 1: read_excel()
setwd("/Users/Lily/Documents/leadership.xlsx")
setwd("~/Users/Lily/Documents/leadership.xlsx")
library(readxl)
leadership <- read_excel("leadership.xlsx")
getwd()
setwd(~/Users/Lily/Documents/)
setwd(/Users/Lily/Documents)
setwd(users/Lily/Documents)
setwd(Users/Lily/Documents)
setwd(/Documents)
setwd(Documents)
setwd(/Users/Lily/Documents/leadership.xlsx)
setwd(Users/Lily/Documents/leadership.xlsx)
setwd(~/Users/Lily/Documents/leadership.xlsx)
setwd("/Users/Lily/Documents/leadership.xlsx")
install.packages("lattice")
install.packages("swirl")
Yes
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(swirl)
library(swirl)
install.packages(c("digest", "lattice", "mgcv"))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library("swirl")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
5+7
5+7
5 + 7
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir
setwd(old.dir)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", folder1, folder2)
file.path(folder1/folder2/"mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", recursive=TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
quit()
library(readxl)
Armands_Pizza <- data.frame(Armands_Pizza)
Armands_Pizza <- data.frame(Armands_Pizza)
load("Armands_Pizza.xlsx")
install.packages("tidyverse")
#loading library
library(tidyverse)
#loading data
ggplot2::mpg
library(readxl)
library(tidyverse)
validation_results2 <- confusionMatrix(table(logit.reg.pred2 >= 0.610,
valid.df$Profitable == 1))
#---- 1. load packages ----
library(readxl)
library(caret)
library(corrplot)
library(FNN)
library(ROCR)
library(forecast)
library(ggplot2)
#----- 2. set working dictonary ----
setwd("/Users/Lily/Library/Mobile Documents/com~apple~CloudDocs/Trinity College Dublin/BU7143_BU7144 Business Data Mining and Forecasting/Group Assignment BADM/Movies_db")
#---- 3. open files & data cleaning ----
movies_raw <- read.csv("tmdb_5000_movies.csv")
View(movies_raw)
#we cleaned the data in Excel
movies <- read_excel("tmdb_5000_movies_08112021.xlsx")
movies <- movies[,-c(2,3,9,10,12,33,35)]
View(movies)
#---- 4. normalisation of data ----
normalised_values <- preProcess(movies, method="range")
movies_norm <- predict(normalised_values, movies)
mean(movies_norm$Profitable) #how many movies are profitable within the dataset?
#----- 2. set working dictonary ----
setwd("/Users/Lily/Library/Mobile Documents/com~apple~CloudDocs/Trinity College Dublin/BU7143_BU7144 Business Data Mining and Forecasting/Group Assignment BADM/Movies_db/Movies Data Mining/Data-Mining-Project-Movies")
#---- 3. open files & data cleaning ----
movies_raw <- read.csv("tmdb_5000_movies.csv")
View(movies_raw)
#we cleaned the data in Excel
movies <- read_excel("tmdb_5000_movies_08112021.xlsx")
movies <- movies[,-c(2,3,9,10,12,33,35)]
#---- 4. normalisation of data ----
normalised_values <- preProcess(movies, method="range")
movies_norm <- predict(normalised_values, movies)
mean(movies_norm$Profitable) #how many movies are profitable within the dataset?
summary(movies)
head(movies)
#---- 5. fitting a linear model (not used for our prediction) ----
movies_lm <- lm(movies_norm$Profitable ~ ., movies_norm)
summary(movies_lm)
#---- 6. sample and split training and validations set ----
set.seed(111)
train.index <- sample(row.names(movies_norm), 0.6*dim(movies_norm)[1])
valid.index <- setdiff(row.names(movies_norm), train.index)
train.df <- movies_norm[train.index, ]
valid.df <- movies_norm[valid.index, ]
#---- 7.1. logistic regression model with all variables ----
#model including all variables
logit.reg2 <- glm(Profitable ~ ., data = train.df, family = "binomial")
summary(logit.reg2)
#predicting on the training set
logit.reg.train2 <- predict(logit.reg2, train.df, type = "response")
#ROC for model evaluation on the training set
training_pred <- prediction(logit.reg.train2, train.df$Profitable)
performance_training <- performance(training_pred,"tpr","fpr")
plot(performance_training, main="ROC Training Dataset")
abline(h=0.4, col="blue")
abline(h=0.8, col="blue")
training_results2_0.4 <- confusionMatrix(table(logit.reg.train2 >= 0.40,
train.df$Profitable == 1))
training_results2_0.5 <- confusionMatrix(table(logit.reg.train2 >= 0.50,
train.df$Profitable == 1))
training_results2_0.6 <- confusionMatrix(table(logit.reg.train2 >= 0.60,
train.df$Profitable == 1))
training_results2_0.61 <- confusionMatrix(table(logit.reg.train2 >= 0.61,
train.df$Profitable == 1))
training_results2_0.62 <- confusionMatrix(table(logit.reg.train2 >= 0.62,
train.df$Profitable == 1))
training_results2_0.63 <- confusionMatrix(table(logit.reg.train2 >= 0.63,
train.df$Profitable == 1))
training_results2_0.64 <- confusionMatrix(table(logit.reg.train2 >= 0.64,
train.df$Profitable == 1))
training_results2_0.65 <- confusionMatrix(table(logit.reg.train2 >= 0.65,
train.df$Profitable == 1))
training_results2_0.66 <- confusionMatrix(table(logit.reg.train2 >= 0.66,
train.df$Profitable == 1))
training_results2_0.67 <- confusionMatrix(table(logit.reg.train2 >= 0.67,
train.df$Profitable == 1))
training_results2_0.68 <- confusionMatrix(table(logit.reg.train2 >= 0.68,
train.df$Profitable == 1))
training_results2_0.69 <- confusionMatrix(table(logit.reg.train2 >= 0.69,
train.df$Profitable == 1))
training_results2_0.7 <- confusionMatrix(table(logit.reg.train2 >= 0.70,
train.df$Profitable == 1))
training_results2_0.8 <- confusionMatrix(table(logit.reg.train2 >= 0.80,
train.df$Profitable == 1))
cutoffvalue <- c(0.4,0.5,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.8)
results_accuracy <- c(training_results2_0.4$overall[1],training_results2_0.5$overall[1],training_results2_0.6$overall[1],
training_results2_0.61$overall[1],training_results2_0.62$overall[1],training_results2_0.63$overall[1],
training_results2_0.64$overall[1],training_results2_0.65$overall[1],training_results2_0.66$overall[1],
training_results2_0.67$overall[1],training_results2_0.68$overall[1],training_results2_0.69$overall[1],
training_results2_0.7$overall[1],training_results2_0.8$overall[1])
results_sensitivity <- c(training_results2_0.4$byClass[1],training_results2_0.5$byClass[1],training_results2_0.6$byClass[1],
training_results2_0.61$byClass[1],training_results2_0.62$byClass[1],training_results2_0.63$byClass[1],
training_results2_0.64$byClass[1],training_results2_0.65$byClass[1],training_results2_0.66$byClass[1],
training_results2_0.67$byClass[1],training_results2_0.68$byClass[1],training_results2_0.69$byClass[1],
training_results2_0.7$byClass[1],training_results2_0.8$byClass[1])
results_specificity <- c(training_results2_0.4$byClass[2],training_results2_0.5$byClass[2],training_results2_0.6$byClass[2],
training_results2_0.61$byClass[2],training_results2_0.62$byClass[2],training_results2_0.63$byClass[2],
training_results2_0.64$byClass[2],training_results2_0.65$byClass[2],training_results2_0.66$byClass[2],
training_results2_0.67$byClass[2],training_results2_0.68$byClass[2],training_results2_0.69$byClass[2],
training_results2_0.7$byClass[2],training_results2_0.8$byClass[2])
results_comparison <- rbind(results_accuracy, results_sensitivity, results_specificity)
colnames(results_comparison) <- cutoffvalue
results_comparison
write.csv(results_comparison, "Log_regression_results_comparison.csv") #to create a better line chart in Excel than it would look like in R for the report
#predicting on the validation set
logit.reg.pred2 <- predict(logit.reg2, valid.df, type = "response")
#ROC for model evaluation on the validation set
valid_pred <- prediction(logit.reg.pred2, valid.df$Profitable)
performance_valid <- performance(valid_pred, "tpr","fpr")
plot(performance_valid, main="ROC Validation Dataset")
abline(h=0.61, col="red")
#confusion matrices for both predictions
training_results2 <- confusionMatrix(table(logit.reg.train2 >= 0.610,
train.df$Profitable == 1))
validation_results2 <- confusionMatrix(table(logit.reg.pred2 >= 0.610,
valid.df$Profitable == 1))
validation_results2
#---- 7.1. logistic regression model with all variables ----
#model including all variables
?glm
summary(logit.reg2)
#predicting on the validation set
logit.reg.pred2 <- predict(logit.reg2, valid.df, type = "response")
logit.reg.pred2
results_comparison
